generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// Admin Credential Management Model
model AdminCredential {
  id          String   @id @default(cuid())
  username    String   @unique
  passwordHash String
  name        String
  email       String   @unique
  role        String   // owner, admin, support, marketing, finance, content_developer
  permissions String[] // Array of permission strings
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // ID of admin who created this account

  @@index([username])
  @@index([email])
  @@index([role])
  @@index([isActive])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                      String          @id @default(cuid())
  email                   String          @unique
  emailVerified           DateTime?
  name                    String?
  image                   String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  subscriptionPlan        String          @default("free")
  subscriptionStatus      String          @default("inactive")
  subscriptionRenewalDate DateTime?
  usageThisMonth          Int             @default(0)
  overageConsent          Boolean         @default(false)
  overageConsentDate      DateTime?
  teamId                  String?
  role                    String?         @default("member")
  
  // Enhanced subscription management fields
  pendingDowngradePlan    String?         // Plan to downgrade to at renewal
  pendingDowngradeDate    DateTime?       // When downgrade takes effect
  dailyUsageCount         Int             @default(0)
  dailyUsageDate          DateTime?       // Track which day the usage is for
  
  // Payment fields
  stripeCustomerId        String?         @unique
  defaultPaymentMethodId  String?
  billingAddress          Json?           // Store billing address as JSON
  
  // Auth relations
  accounts                Account[]
  sessions                Session[]
  // App relations
  contents                Content[]
  contentTemplates        ContentTemplate[]
  DailyUsage              DailyUsage[]
  overageCharges          OverageCharge[]
  settings                Settings?
  supportTickets          SupportTicket[]
  ticketReplies           TicketReply[]
  usageHistory            UsageHistory[]
  reviews                 Review[]
  team                    Team?           @relation(fields: [teamId], references: [id])
  sentInvitations         TeamInvitation[] @relation("InvitedBy")
  paymentMethods          PaymentMethod[]
  subscriptions           Subscription[]
  invoices                Invoice[]
  subscriptionChanges     SubscriptionChange[]
  billingCycles           BillingCycle[]
  comments                Comment[]
  commentReplies          CommentReply[]
  contentChanges          ContentChange[]
  auditLogs               AuditLog[]

  // Performance indexes
  @@index([subscriptionPlan])
  @@index([subscriptionStatus])
  @@index([usageThisMonth])
  @@index([createdAt])
  @@index([teamId])
  @@index([subscriptionRenewalDate])
  @@index([subscriptionPlan, subscriptionStatus])
  @@index([createdAt, subscriptionPlan])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberLimit Int      @default(3)
  members     User[]
  invitations TeamInvitation[]
}

model TeamInvitation {
  id        String   @id @default(cuid())
  teamId    String
  email     String
  invitedBy String
  status    String   @default("pending") // pending, accepted, declined, expired
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter   User     @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@unique([teamId, email])
  @@index([email])
  @@index([token])
}

model UsageHistory {
  id         String   @id @default(cuid())
  userId     String
  month      Int
  year       Int
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}

model Content {
  id              String              @id @default(cuid())
  title           String
  originalContent String
  contentType     String
  status          String              @default("Generated") // "Generated" for keyword-generated content, "Repurposed" for repurposed content
  isDraft         Boolean             @default(false)
  templateId      String?             // Reference to template used
  version         Int                 @default(1)
  parentId        String?             // For content versioning
  userId          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  template        ContentTemplate?    @relation(fields: [templateId], references: [id])
  parent          Content?            @relation("ContentVersions", fields: [parentId], references: [id])
  versions        Content[]           @relation("ContentVersions")
  repurposed      RepurposedContent[]
  analytics       ContentAnalytics[]
  comments        Comment[]
  collaborationSessions CollaborationSession[]

  // Enhanced indexes for better performance
  @@index([userId])
  @@index([status])
  @@index([isDraft])
  @@index([templateId])
  @@index([parentId])
  @@index([contentType])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([userId, contentType])
  @@index([userId, status, createdAt])
  @@index([status, createdAt])
}

model RepurposedContent {
  id              String   @id @default(cuid())
  platform        String
  content         String
  contentId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  originalContent Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  // Add indexes for better query performance
  @@index([contentId])
  @@index([platform])
  @@index([createdAt])
  @@index([contentId, platform])
  @@index([contentId, createdAt])
}

model ContentTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  contentType String    // blog, article, social_post, email, etc.
  template    String    // Template content with placeholders
  variables   String[]  // Array of variable names like ["title", "keywords", "tone"]
  isPublic    Boolean   @default(false) // Public templates vs user-specific
  userId      String?   // Null for public templates
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contents    Content[]

  @@index([contentType])
  @@index([isPublic])
  @@index([userId])
}

model ContentAnalytics {
  id          String   @id @default(cuid())
  contentId   String
  views       Int      @default(0)
  repurposes  Int      @default(0)
  engagement  Json?    // Store engagement metrics as JSON
  performance Json?    // Store performance data as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId])
  @@index([contentId])
}

model Settings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  brandVoice         String?
  preferredPlatforms String[]
  overageEnabled     Boolean  @default(false)
  apiKey             String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyUsage {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
  @@index([date, count])
}

model OverageCharge {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  count     Int
  date      DateTime @default(now())
  status    String   @default("pending")
  invoiceId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}

model SupportTicket {
  id          String        @id @default(cuid())
  subject     String        // Keep existing field name
  description String
  status      String        @default("open")
  priority    String        @default("medium")
  category    String?
  userId      String
  assignedTo  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies     TicketReply[]

  // Performance indexes
  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([createdAt])
  @@index([status, priority])
  @@index([userId, status])
  @@index([status, createdAt])
}

model TicketReply {
  id            String        @id @default(cuid())
  ticketId      String
  userId        String
  message       String
  isStaff       Boolean       @default(false)
  createdAt     DateTime      @default(now())
  attachmentUrl String?
  ticket        SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int      // 1-5 star rating
  title     String?
  message   String
  status    String   @default("pending") // pending, approved, rejected
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rating])
  @@index([status])
  @@index([isPublic])
}

// Payment Models for Stripe Integration
model PaymentMethod {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentMethodId String @unique
  type              String   // card, bank_account, etc.
  brand             String?  // visa, mastercard, etc.
  last4             String?  // last 4 digits
  expiryMonth       Int?
  expiryYear        Int?
  isDefault         Boolean  @default(false)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripePaymentMethodId])
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  stripeSubscriptionId  String   @unique
  stripePriceId         String
  status                String   // active, canceled, incomplete, etc.
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  canceledAt            DateTime?
  trialStart            DateTime?
  trialEnd              DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([status])
}

model Invoice {
  id              String   @id @default(cuid())
  userId          String
  stripeInvoiceId String   @unique
  amount          Float
  currency        String   @default("usd")
  status          String   // paid, open, draft, etc.
  hostedInvoiceUrl String?
  invoicePdf      String?
  description     String?
  periodStart     DateTime?
  periodEnd       DateTime?
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeInvoiceId])
  @@index([status])
}

model SubscriptionChange {
  id              String   @id @default(cuid())
  userId          String
  fromPlan        String
  toPlan          String
  changeType      String   // "upgrade", "downgrade", "cancel"
  scheduledDate   DateTime // When change takes effect
  processedDate   DateTime?
  status          String   // "pending", "processed", "canceled"
  stripeEventId   String?
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([scheduledDate])
}

// Phase 2: Enhanced Billing Models
model BillingCycle {
  id              String   @id @default(cuid())
  userId          String
  period          String   // YYYY-MM format
  planType        String
  baseAmount      Float    // Base subscription amount in cents
  usageAmount     Float    // Usage charges in cents
  overageAmount   Float    // Overage charges in cents
  totalAmount     Float    // Total amount in cents
  status          String   @default("pending") // pending, processed, failed
  processedAt     DateTime?
  stripeInvoiceId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([period])
  @@index([status])
}

// Phase 2: Collaboration Models
model Comment {
  id        String         @id @default(cuid())
  contentId String
  userId    String
  text      String
  position  Int            // Character position in content
  resolved  Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  content   Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   CommentReply[]

  @@index([contentId])
  @@index([userId])
  @@index([resolved])
}

model CommentReply {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  text      String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([userId])
}

model CollaborationSession {
  id        String    @id @default(cuid())
  contentId String
  status    String    @default("active") // active, ended
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  changes   ContentChange[]

  @@index([contentId])
  @@index([status])
}

model ContentChange {
  id        String              @id @default(cuid())
  sessionId String
  userId    String
  type      String              // insert, delete, format, comment
  position  Int
  content   String?
  length    Int?
  metadata  Json?
  timestamp DateTime            @default(now())
  session   CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
}

// Audit Logging Model
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  sessionId   String?
  action      String
  resource    String?
  resourceId  String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  success     Boolean  @default(true)
  errorMessage String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}
